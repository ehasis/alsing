<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alsing.SyntaxBox</name>
    </assembly>
    <members>
        <member name="M:Alsing.Windows.Forms.CoreLib.ThumbControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws a 2px Raised Border for the ThumbControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Alsing.Windows.Forms.CoreLib.ThumbControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.ThumbControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.ThumbControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.CoreLib.FormatLabelControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.FormatLabelControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.CoreLib.IntelliMouseControl">
            <summary>
            Summary description for IntelliMouseControl.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.IntelliMouseControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.RegionHandler.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.CoreLib.SplitViewChildControl">
            <summary>
            Summary description for SplitViewChildControl.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewChildControl.LeftThumbVisible">
            <summary>
            Gets or Sets if the Left side thumb control is visible or not.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewChildControl.TopThumbVisible">
            <summary>
            Getd ot Sets if the Top thumb control is visible or not.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.CoreLib.SplitViewControl">
            <summary>
            Summary description for SplitView.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.CoreLib.SplitViewControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.#ctor">
            <summary>
            Default constructor for the splitview control
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewControl.UpperLeft">
            <summary>
            Gets or Sets the control that should be confined to the upper left view.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewControl.UpperRight">
            <summary>
            Gets or Sets the control that should be confined to the upper right view.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewControl.LowerLeft">
            <summary>
            Gets or Sets the control that should be confined to the lower left view.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewControl.LowerRight">
            <summary>
            Gets or Sets the control that should be confined to the lower right view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.CoreLib.SplitViewControl.Resizing">
            <summary>
            an event fired when the split view is resized.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.CoreLib.SplitViewControl.HideTop">
            <summary>
            an event fired when the top views are hidden.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.CoreLib.SplitViewControl.HideLeft">
            <summary>
            an event fired when the left views are hidden.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.OnResize(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.Split5050h">
            <summary>
            Splits the view horiziontally.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.Split5050v">
            <summary>
            Splits teh view vertically.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.InvokeMouseDownh">
            <summary>
            Start dragging the horizontal splitter.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewControl.InvokeMouseDownv">
            <summary>
            Start dragging the vertical splitter.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewParentControl.ActiveView">
            <summary>
            Gets or Sets the active view
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.CoreLib.SplitViewParentControl.ResetSplitview">
            <summary>
            Resets the Splitview.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewParentControl.ChildBorderStyle">
            <summary>
            Gets or Sets the border styles of the split views.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.CoreLib.SplitViewParentControl.ChildBorderColor">
            <summary>
            Gets or Sets the border color of the split views.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.Caret">
            <summary>
            Caret class used by the SyntaxBoxControl
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Caret.Position">
            <summary>
            Gets or Sets the position of the caret.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.Caret.Change">
            <summary>
            Event fired when the carets position has changed.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Caret._Position">
            <summary>
            The Position of the caret in Chars (Column and Row index)
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Caret.Blink">
            <summary>
            Used by the painter to determine if the caret should be rendered or not
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.#ctor(Alsing.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Caret constructor
            </summary>
            <param name="control">The control that will use the caret</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.CropPosition">
            <summary>
            Confines the caret to a valid position within the active document
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveRight(System.Boolean)">
            <summary>
            Moves the caret right one step.
            if the caret is placed at the last column of a row the caret will move down one row and be placed at the first column of that row.
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveUp(System.Boolean)">
            <summary>
            Moves the caret up one row.
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveUp(System.Int32,System.Boolean)">
            <summary>
            Moves the caret up x rows
            </summary>
            <param name="rows">Number of rows the caret should be moved up</param>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveDown(System.Int32,System.Boolean)">
            <summary>
            Moves the caret down x rows.
            </summary>
            <param name="rows">The number of rows the caret should be moved down</param>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveDown(System.Boolean)">
            <summary>
            Moves the caret down one row.
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveLeft(System.Boolean)">
            <summary>
            Moves the caret left one step.
            if the caret is placed at the first column the caret will be moved up one line and placed at the last column of the row.
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveHome(System.Boolean)">
            <summary>
            Moves the caret to the first non whitespace column at the active row
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveEnd(System.Boolean)">
            <summary>
            Moves the caret to the end of a row ignoring any whitespace characters at the end of the row
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveAbsoluteHome(System.Boolean)">
            <summary>
            Moves the caret to the first column of the active row
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.MoveAbsoluteEnd(System.Boolean)">
            <summary>
            Moves the caret to the absolute end of the active row
            </summary>
            <param name="Select">True if a selection should be created from the current caret pos to the new pos</param>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Caret.CurrentWord">
            <summary>
            Gets the word that the caret is placed on.
            This only applies if the active row is fully parsed.
            </summary>
            <returns>a Word object from the active row</returns>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Caret.CurrentRow">
            <summary>
            Returns the row that the caret is placed on
            </summary>
            <returns>a Row object from the active document</returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.CurrentSegment">
            <summary>
            Gets the word that the caret is placed on.
            This only applies if the active row is fully parsed.
            </summary>
            <returns>a Word object from the active row</returns>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Caret.LogicalPosition">
            <summary>
            Gets or Sets the Logical position of the caret.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Caret.SetPos(Alsing.SourceCode.TextPoint)">
            <summary>
            Sets the position of the caret
            </summary>
            <param name="pos">Point containing the new x and y positions</param>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.KeyboardActionList">
            <summary>
            Collection of KeyboardActions
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.ActionDelegate">
            <summary>
            Delegate used when triggering keyboard actions
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.KeyboardAction">
            <summary>
            Instances of this class represents a relation between pressed keys and a delegate
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.KeyboardAction._Key">
            <summary>
            Determines what key to associate with the action
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter">
            <summary>
            Painter class that uses GDI32 to render the content of a SyntaxBoxControl
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.#ctor(Alsing.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            NativePainter constructor.
            </summary>
            <param name="control">The control that will use the Painter</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.Resize">
            <summary>
            Implementation of the IPainter Resize method
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.MeasureString(System.String)">
            <summary>
            Implementation of the IPainter MeasureString method
            </summary>
            <param name="s">String to measure</param>
            <returns>Size of the string in pixels</returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.InitGraphics">
            <summary>
            Implementation of the IPainter InitGraphics method.
            Initializes GDI32 backbuffers and brushes.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.RenderAll">
            <summary>
            Implementation of the IPainter RenderAll method.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.RenderAll(System.Drawing.Graphics)">
            <summary>
            Implementation of the IPainter RenderAll method
            </summary>
            <param name="g">Target Graphics object</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.RenderRow(System.Int32)">
            <summary>
            
            </summary>
            <param name="RowIndex"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.CharFromPixel(System.Int32,System.Int32)">
            <summary>
            Implementation of the iPainter CharFromPixel method
            </summary>
            <param name="X">Screen x position in pixels</param>
            <param name="Y">Screen y position in pixels</param>
            <returns>a Point where x is the column and y is the rowindex</returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.NativePainter.MeasureRow(Alsing.SourceCode.Row,System.Int32)">
            <summary>
            Implementation of the IPainter MeasureRow method.
            </summary>
            <param name="xtr">Row to measure</param>
            <param name="Count">Last char index</param>
            <returns>The size of the row in pixels</returns>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint">
            <summary>
            View point struct used by the SyntaxBoxControl.
            The struct contains information about various rendering parameters that the IPainter needs.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.Action">
            <summary>
            The action that the SyntaxBoxControl is currently performing
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.CharWidth">
            <summary>
            Width of a char (space) in pixels
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.ClientAreaStart">
            <summary>
            Height of the client area in pixels
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.ClientAreaWidth">
            <summary>
            Width of the client area in pixels
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.FirstVisibleColumn">
            <summary>
            Index of the first visible column
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.FirstVisibleRow">
            <summary>
            Index of the first visible row
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.GutterMarginWidth">
            <summary>
            Width of the gutter margin in pixels
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.LineNumberMarginWidth">
            <summary>
            Width of the Linenumber margin in pixels
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.RowHeight">
            <summary>
            Height of a row in pixels
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.TextMargin">
            <summary>
            Width of the text margin (sum of gutter + linenumber + folding margins)
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.TotalMarginWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.VisibleRowCount">
            <summary>
            Number of rows that can be displayed in the current view
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.ViewPoint.YOffset">
            <summary>
            Used for offsetting the screen in y axis.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems">
            <summary>
            Struct used by the NativePainter class.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.BackBuffer">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.BackgroundBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontBold">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontBoldItalic">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontBoldItalicUnderline">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontBoldUnderline">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontItalic">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontItalicUnderline">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontNormal">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.FontUnderline">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.GutterMarginBorderBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.GutterMarginBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.HighLightLineBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.LineNumberMarginBorderBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.LineNumberMarginBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.OutlineBrush">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.SelectionBuffer">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Painter.RenderItems.StringBuffer">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.MeasureRow(Alsing.SourceCode.Row,System.Int32)">
            <summary>
             Measures the length of a specific row in pixels
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.RenderAll">
            <summary>
            Renders the entire screen
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.RenderAll(System.Drawing.Graphics)">
            <summary>
            Renders the entire screen
            </summary>
            <param name="g">Target Graphics object</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.RenderCaret(System.Drawing.Graphics)">
            <summary>
            Renders the caret only
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.RenderRow(System.Int32)">
            <summary>
            
            </summary>
            <param name="RowIndex"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.CharFromPixel(System.Int32,System.Int32)">
            <summary>
            Returns a Point (Column,Row in the active document) from the x and y screen pixel positions.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.Resize">
            <summary>
            Called by the control to notify the Painter object that the client area has resized.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.InitGraphics">
            <summary>
            Called by the control to notify the Painter object that one or more Appearance properties has changed.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Painter.IPainter.MeasureString(System.String)">
            <summary>
            Measures the length of a string in pixels
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.Selection">
            <summary>
            Selection class used by the SyntaxBoxControl
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.Selection.Change">
            <summary>
            Event fired when the selection has changed.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.#ctor(Alsing.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Selection Constructor.
            </summary>
            <param name="control">Control that will use this selection</param>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.Text">
            <summary>
            Gets the text of the active selection
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.LogicalBounds">
            <summary>
            Returns the normalized positions of the selection.
            Swapping start and end values if the selection is reversed.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.IsValid">
            <summary>
            Returns true if the selection contains One or more chars
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.SelLength">
            <summary>
            gets or sets the length of the selection in chars
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.SelEnd">
            <summary>
            Gets or Sets the Selection end as an index in the document text.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.SelStart">
            <summary>
            Gets or Sets the Selection start as an index in the document text.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.Selection.LogicalSelStart">
            <summary>
            Gets or Sets the logical Selection start as an index in the document text.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.Indent">
            <summary>
            Indent the active selection one step.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.Outdent">
            <summary>
            Outdent the active selection one step
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.Outdent(System.String)">
            <summary>
            Outdent the active selection one step
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.DeleteSelection">
            <summary>
            Delete the active selection.
            <seealso cref="M:Alsing.Windows.Forms.SyntaxBox.Selection.ClearSelection"/>
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.ClearSelection">
            <summary>
            Clear the active selection
            <seealso cref="M:Alsing.Windows.Forms.SyntaxBox.Selection.DeleteSelection"/>
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.MakeSelection">
            <summary>
            Make a selection from the current selection start to the position of the caret
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.Selection.SelectAll">
            <summary>
            Select all text.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.Selection._Bounds">
            <summary>
            The bounds of the selection
            </summary>
            
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.IndentStyle">
            <summary>
            Indent styles used by the control
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.IndentStyle.None">
            <summary>
            Caret is always confined to the first column when a new line is inserted
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.IndentStyle.LastRow">
            <summary>
            New lines inherit the same indention as the previous row.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.IndentStyle.Scope">
            <summary>
            New lines get their indention from the scoping level.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.IndentStyle.Smart">
            <summary>
            New lines get thir indention from the scoping level or from the previous row
            depending on which is most indented.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.EditAction">
            <summary>
            Text actions that can be performed by the SyntaxBoxControl
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.EditAction.None">
            <summary>
            The control is not performing any action
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.EditAction.DragText">
            <summary>
            The control is in Drag Drop mode
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.EditAction.SelectText">
            <summary>
            The control is selecting text
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.AutoListForm">
            <summary>
            Summary description for AutoListForm.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.AutoListForm.Images">
            <summary>
            The imagelist that should be used by the AutoListForm
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.#ctor">
            <summary>
            Default AltoListControl constructor.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.AutoListForm.SelectedText">
            <summary>
            Gets the "insert text" from the selected item.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>		
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            For public use only.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.IsInputChar(System.Char)">
            <summary>
            For public use only.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.Add(System.String,System.Int32)">
            <summary>
            Adds a new ListItem to the AutoListForm.
            </summary>
            <param name="text">Text of the new ListItem</param>
            <param name="ImageIndex">Image index that should be assigned to the new ListItem</param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.Add(System.String,System.String,System.Int32)">
            <summary>
            Adds a new ListItem to the AutoListForm.
            </summary>
            <param name="text">Text of the new ListItem</param>
            <param name="InsertText">text to insert when this item is selected</param>
            <param name="ImageIndex">Image index that should be assigned to the new ListItem</param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.Clear">
            <summary>
            Clears the content of the AutoList.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.AutoListForm.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.TabListBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            For public use only.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.TabListBox.IsInputChar(System.Char)">
            <summary>
            For public use only.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.ListItem">
            <summary>
            Summary description for ListItem.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.ListItem.InsertText">
            <summary>
            The insert text of a ListItem
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.ListItem.Text">
            <summary>
            The text of a ListItem
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.ListItem.ToolTip">
            <summary>
            The tooltip text that should be displayed when selecting a ListItem
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.ListItem.Type">
            <summary>
            The type of the ListItem (the type is used as an index to choose what icon to display)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.ListItem.#ctor(System.String,System.Int32)">
            <summary>
            ListItem constructor , takes text and type as parameters
            </summary>
            <param name="text">The text that should be assigned to the ListItem</param>
            <param name="type">The type of the ListItem</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.ListItem.#ctor(System.String,System.Int32,System.String)">
            <summary>
            ListItem constructor , takes text , type and tooltip text as parameters
            </summary>
            <param name="text">The text that should be assigned to the ListItem</param>
            <param name="type">The type of the ListItem</param>
            <param name="tooltip">The tooltip text that should be assigned to the ListItem</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.ListItem.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            ListItem constructor , takes text , type , tooltip text and insert text as parameters
            </summary>
            <param name="text">The text that should be assigned to the ListItem</param>
            <param name="type">The type of the ListItem</param>
            <param name="tooltip">The tooltip text that should be assigned to the ListItem</param>
            <param name="inserttext">The text that should be inserted into the text when this item is selected</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.ListItem.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.ListItem.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.EditViewControl.AutoListStartPos">
            <summary>
            The Point in the text where the Autolist was activated.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.EditViewControl.InfoTipStartPos">
            <summary>
            The Point in the text where the InfoTip was activated.
            </summary>		
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.CaretChange">
            <summary>
            An event that is fired when the caret has moved.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SelectionChange">
            <summary>
            An event that is fired when the selection has changed.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.RowMouseDown">
            <summary>
            An event that is fired when mouse down occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.RowMouseMove">
            <summary>
            An event that is fired when mouse move occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.RowMouseUp">
            <summary>
            An event that is fired when mouse up occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.RowClick">
            <summary>
            An event that is fired when a click occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.RowDoubleClick">
            <summary>
            An event that is fired when a double click occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ClipboardUpdated">
            <summary>
            An event that is fired when the control has updated the clipboard
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.#ctor(Alsing.Windows.Forms.SyntaxBoxControl)">
            <summary>
            Default constructor for the SyntaxBoxControl
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            For public use only
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ShowGotoLine">
            <summary>
            Displays the GotoLine dialog.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ShowSettings">
            <summary>
            -
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.GotoLine(System.Int32)">
            <summary>
            Places the caret on a specified line and scrolls the caret into view.
            </summary>
            <param name="RowIndex">the zero based index of the line to jump to</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ClearSelection">
            <summary>
            Clears the active selection.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.IsOverSelection(System.Int32,System.Int32)">
            <summary>
            Returns if a specified pixel position is over the current selection.
            </summary>
            <param name="x">X Position in pixels</param>
            <param name="y">Y Position in pixels</param>
            <returns>true if over selection othewise false</returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ScrollIntoView(Alsing.SourceCode.TextPoint)">
            <summary>
            Scrolls a given position in the text into view.
            </summary>
            <param name="Pos">Position in text</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ScrollIntoView">
            <summary>
            Scrolls the caret into view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.GotoNextBookmark">
            <summary>
            Moves the caret to the next line that has a bookmark.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.GotoPreviousBookmark">
            <summary>
            Moves the caret to the previous line that has a bookmark.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SelectNext(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects next occurance of the given pattern.
            </summary>
            <param name="Pattern">Pattern to find</param>
            <param name="MatchCase">Case sensitive</param>
            <param name="WholeWords">Match whole words only</param>
            <param name="UseRegEx"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ToggleBookmark">
            <summary>
            Toggles a bookmark on/off on the active row.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Delete">
            <summary>
            Deletes selected text if possible otherwise deletes forward. (delete key)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SelectAll">
            <summary>
            Selects all text in the active document. (control + a)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Paste">
            <summary>
            Paste text from clipboard to current caret position. (control + v)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Copy">
            <summary>
            Copies selected text to clipboard. (control + c)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Cut">
            <summary>
            Cuts selected text to clipboard. (control + x)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.RemoveCurrentRow">
            <summary>
            Removes the current row
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Redo">
            <summary>
            Redo last undo action. (control + y)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Undo">
            <summary>
            Undo last edit action. (control + z)
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.CharFromPixel(System.Int32,System.Int32)">
            <summary>
            Returns a point where x is the column and y is the row from a given pixel position.
            </summary>
            <param name="x">X Position in pixels</param>
            <param name="y">Y Position in pixels</param>
            <returns>Column and Rowindex</returns>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OverWrite">
            <summary>
            Returns true if the control is in overwrite mode.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.CanCopy">
            <summary>
            Returns True if the control contains a selected text.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.CanPaste">
            <summary>
            Returns true if there is any valid text data inside the Clipboard.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.CanUndo">
            <summary>
            Returns true if the undobuffer contains one or more undo actions.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.CanRedo">
            <summary>
            Returns true if the control can redo the last undo action/s
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.FontSize">
            <summary>
            Gets the size (in pixels) of the font to use when rendering the the content.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Indent">
            <summary>
            Gets the indention style to use when inserting new lines.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Document">
            <summary>
            Gets the SyntaxDocument the control is currently attatched to.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.TooltipDelay">
            <summary>
            Gets the delay in MS before the tooltip is displayed when hovering a collapsed section.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ReadOnly">
            <summary>
            Gets if the control is readonly.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.FontName">
            <summary>
            Gets the name of the font to use when rendering the control.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BracketMatching">
            <summary>
            Gets if the control should render bracket matching.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.VirtualWhitespace">
            <summary>
            Gets if the control should render whitespace chars.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SeparatorColor">
            <summary>
            Gets the Color of the horizontal separators (a'la visual basic 6).
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BracketForeColor">
            <summary>
            Gets the text color to use when rendering bracket matching.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BracketBackColor">
            <summary>
            Gets the back color to use when rendering bracket matching.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SelectionBackColor">
            <summary>
            Gets the back color to use when rendering the selected text.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SelectionForeColor">
            <summary>
            Gets the text color to use when rendering the selected text.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.InactiveSelectionBackColor">
            <summary>
            Gets the back color to use when rendering the inactive selected text.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.InactiveSelectionForeColor">
            <summary>
            Gets the text color to use when rendering the inactive selected text.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.GutterMarginBorderColor">
            <summary>
            Gets the color of the border between the gutter area and the line number area.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.LineNumberBorderColor">
            <summary>
            Gets the color of the border between the line number area and the folding area.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BreakPointForeColor">
            <summary>
            Gets the text color to use when rendering breakpoints.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BreakPointBackColor">
            <summary>
            Gets the back color to use when rendering breakpoints.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.LineNumberForeColor">
            <summary>
            Gets the text color to use when rendering line numbers.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.LineNumberBackColor">
            <summary>
            Gets the back color to use when rendering line number area.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.GutterMarginColor">
            <summary>
            Gets the color of the gutter margin.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BackColor">
            <summary>
            Gets or Sets the background Color of the client area.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.HighLightedLineColor">
            <summary>
            Gets the back color to use when rendering the active line.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.HighLightActiveLine">
            <summary>
            Get if the control should highlight the active line.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ShowWhitespace">
            <summary>
            Get if the control should render whitespace chars.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ShowLineNumbers">
            <summary>
            Get if the line number margin is visible or not.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ShowGutterMargin">
            <summary>
            Get if the gutter margin is visible or not.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.GutterMarginWidth">
            <summary>
            Get the Width of the gutter margin (in pixels)
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.TabSize">
            <summary>
            Get the numbers of space chars in a tab.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.TabsToSpaces">
            <summary>
            Get whether or not TabsToSpaces is turned on.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ShowTabGuides">
            <summary>
            Get if the control should render 'Tab guides'
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.WhitespaceColor">
            <summary>
            Gets the color to use when rendering whitespace chars.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.TabGuideColor">
            <summary>
            Gets the color to use when rendering tab guides.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.BracketBorderColor">
            <summary>
            Get the color to use when rendering bracket matching borders.
            The value is retrived from the owning Syntaxbox control.
            </summary>
            <remarks>
            NOTE: Use the Color.Transparent turn off the bracket match borders.
            </remarks>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OutlineColor">
            <summary>
            Get the color to use when rendering Outline symbols.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.AutoListPosition">
            <summary>
            Positions the AutoList
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.InfoTipPosition">
            <summary>
            Positions the InfoTip
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.AutoListVisible">
            <summary>
            Gets or Sets if the intellisense list is visible.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.InfoTipVisible">
            <summary>
            Gets or Sets if the infotip is visible
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SmoothScroll">
            <summary>
            Get if the control should use smooth scrolling.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.SmoothScrollSpeed">
            <summary>
            Get the number of pixels the screen should be scrolled per frame when using smooth scrolling.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.ParseOnPaste">
            <summary>
            Get if the control should parse all text when text is pasted from the clipboard.
            The value is retrived from the owning Syntaxbox control.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Caret">
            <summary>
            Gets the Caret object.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBox.EditViewControl.Selection">
            <summary>
            Gets the Selection object.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides the default OnKeyDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overrides the default OnKeyPress
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the default OnMouseDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the default OnMouseMove
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the default OnMouseUp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the default OnMouseWheel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides the default OnPaint
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnResize(System.EventArgs)">
            <summary>
            Overrides the default OnResize
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overrides the default OnDragOver
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overrides the default OnDragDrop
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
             Overrides the default OnDragEnter
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnDragLeave(System.EventArgs)">
            <summary>
             Overrides the default OnDragLeave
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.EditViewControl.OnDoubleClick(System.EventArgs)">
            <summary>
             Overrides the default OnDoubleClick
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm">
            <summary>
            Summary description for FindReplace.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.#ctor">
            <summary>
            Default constructor for the FindReplaceForm.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.#ctor(Alsing.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Creates a FindReplaceForm that will be assigned to a specific Owner control.
            </summary>
            <param name="Owner">The SyntaxBox that will use the FindReplaceForm</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.ShowFind">
            <summary>
            Displays the FindReplaceForm and sets it in "Find" mode.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.ShowReplace">
            <summary>
            Displays the FindReplaceForm and sets it in "Replace" mode.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.FindReplaceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.GotoLineForm">
            <summary>
            Summary description for GotoLine.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.GotoLineForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.GotoLineForm.#ctor">
            <summary>
            Default constructor for the GotoLineForm.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.GotoLineForm.#ctor(Alsing.Windows.Forms.SyntaxBox.EditViewControl,System.Int32)">
            <summary>
            Creates a GotoLineForm that will be assigned to a specific Owner control.
            </summary>
            <param name="Owner">The SyntaxBox that will use the GotoLineForm</param>
            <param name="RowCount">The number of lines in the owner control</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.GotoLineForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBox.GotoLineForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.CopyEventArgs">
            <summary>
            Event arg for Copy/Cut actions.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.CopyEventArgs.Text">
            <summary>
            The text copied to the clipboard.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.WordMouseEventArgs">
            <summary>
            Event args passed to word mouse events of the syntaxbox
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.WordMouseEventArgs.Button">
            <summary>
            The mouse buttons that was pressed when the event fired
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.WordMouseEventArgs.Cursor">
            <summary>
            Reference to a mouse cursor , developers can assign new values here to display new cursors for a given pattern
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.WordMouseEventArgs.Pattern">
            <summary>
            The pattern that triggered the event
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.WordMouseEventArgs.Word">
            <summary>
            The word where the event was fired
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.RowMouseEventArgs">
            <summary>
            Event args for mouse actions on the syntaxbox
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowMouseEventArgs.Area">
            <summary>
            The area of the row where the event was fired
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowMouseEventArgs.Button">
            <summary>
            The mousebuttons that was pressed when the event was fired
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowMouseEventArgs.MouseX">
            <summary>
            The X position of the mouse cursor when the event was fired
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowMouseEventArgs.MouseY">
            <summary>
            The Y position of the mouse cursor when the event was fired
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowMouseEventArgs.Row">
            <summary>
            The row where the event was fired
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.RowArea">
            <summary>
            Describes in what area a mouse event occured on a row
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowArea.GutterArea">
            <summary>
            Represents the gutter margin
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowArea.LineNumberArea">
            <summary>
            Represents the LineNumber section
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowArea.FoldingArea">
            <summary>
            Represents the area where the folding symbols are shown
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowArea.TextArea">
            <summary>
            Represents the actual text part of a row
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.RowPaintEventArgs">
            <summary>
            Event args passed to owner draw events of the syntaxbox
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowPaintEventArgs.Bounds">
            <summary>
            the bounds of the row
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowPaintEventArgs.Graphics">
            <summary>
            The graphics surface to draw on
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.SyntaxBox.RowPaintEventArgs.Row">
            <summary>
            The row to draw
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBox.SyntaxBoxDesigner">
            <summary>
            Designer for the SyntaxBoxControl
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.BaseControl.borderStyle">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.BaseControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.BaseControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.BaseListBoxControl.borderStyle">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.BaseListBoxControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.BasePanelControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.FormatLabel.ClickLinkEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.FormatLabel.ClickLinkEventArgs.Link">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.FormatLabel.ClickLinkEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Link"></param>
        </member>
        <member name="T:Alsing.Windows.Forms.FormatLabel.ClickLinkEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.InfoTipForm">
            <summary>
            Summary description for InfoTip.
            </summary>
        </member>
        <member name="F:Alsing.Windows.Forms.InfoTipForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.InfoTipForm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.InfoTipForm.#ctor(System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.InfoTipForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.InfoTipForm.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.InfoTipForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.ActiveView">
            <summary>
            Represents which split view is currently active in the syntaxbox
            </summary>
        </member>
        <member name="T:Alsing.Windows.Forms.SyntaxBoxControl">
            <summary>
            Syntaxbox control that can be used as a pure text editor or as a code editor when a syntaxfile is used.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.WordMouseHover">
            <summary>
            An event that is fired when the cursor hovers a pattern;
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.WordMouseDown">
            <summary>
            An event that is fired when the cursor hovers a pattern;
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.ClipboardUpdated">
            <summary>
            An event that is fired when the control has updated the clipboard
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.CaretChange">
            <summary>
            Event fired when the caret of the active view have moved.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.SelectionChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipSelectedIndexChanged">
            <summary>
            Event fired when the user presses the up or the down button on the infotip.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.RenderRow">
            <summary>
            Event fired when a row is rendered.
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.RowMouseDown">
            <summary>
            An event that is fired when mouse down occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.RowMouseMove">
            <summary>
            An event that is fired when mouse move occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.RowMouseUp">
            <summary>
            An event that is fired when mouse up occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.RowClick">
            <summary>
            An event that is fired when a click occurs on a row
            </summary>
        </member>
        <member name="E:Alsing.Windows.Forms.SyntaxBoxControl.RowDoubleClick">
            <summary>
            An event that is fired when a double click occurs on a row
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.AutoListPosition">
            <summary>
            Positions the AutoList
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipPosition">
            <summary>
            Positions the InfoTip
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ShowRevisionMarks">
            <summary>
            Determines if the revision marks should be visible.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.LockCursorUpdate">
            <summary>
            Prevents the control from changing the cursor.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.RowPadding">
            <summary>
            The row padding in pixels.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipSelectedIndex">
            <summary>
            The selected index in the infotip.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipImage">
            <summary>
            Gets or Sets the image used in the infotip.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipCount">
            <summary>
            Get or Sets the number of choices that could be made in the infotip.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipText">
            <summary>
            The text in the Infotip.
            </summary>
            <remarks><br/>
            The text uses a HTML like syntax.<br/>
            <br/>
            Supported tags are:<br/>
            <br/>
            &lt;Font Size="Size in Pixels" Face="Font Name" Color="Named color" &gt;&lt;/Font&gt; Set Font size,color and fontname.<br/>
            &lt;HR&gt; : Inserts a horizontal separator line.<br/>
            &lt;BR&gt; : Line break.<br/>
            &lt;B&gt;&lt;/B&gt; : Activate/Deactivate Bold style.<br/>
            &lt;I&gt;&lt;/I&gt; : Activate/Deactivate Italic style.<br/>
            &lt;U&gt;&lt;/U&gt; : Activate/Deactivate Underline style.	<br/>			
            </remarks>	
            <example >
            <code>
            MySyntaxBox.InfoTipText="public void MyMethod ( &lt;b&gt; string text &lt;/b&gt; );"; 		
            </code>
            </example>	
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.Selection">
            <summary>
            Gets the Selection object from the active view.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.KeyboardActions">
            <summary>
            Collection of KeyboardActions that is used by the control.
            Keyboard actions to add shortcut key combinations to certain tasks.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.AutoListVisible">
            <summary>
            Gets or Sets if the AutoList is visible in the active view.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InfoTipVisible">
            <summary>
            Gets or Sets if the InfoTip is visible in the active view.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.CanCopy">
            <summary>
            Gets if the control can perform a Copy action.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.CanPaste">
            <summary>
            Gets if the control can perform a Paste action.
            (if the clipboard contains a valid text).
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.CanRedo">
            <summary>
            Gets if the control can perform a ReDo action.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.CanUndo">
            <summary>
            Gets if the control can perform an Undo action.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.GutterIcons">
            <summary>
            Gets or Sets the imagelist to use in the gutter margin.
            </summary>
            <remarks>
            Image Index 0 is used to display the Breakpoint icon.
            Image Index 1 is used to display the Bookmark icon.
            </remarks>		
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.AutoListIcons">
            <summary>
            Gets or Sets the imagelist to use in the autolist.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.TabGuideColor">
            <summary>
            Gets or Sets the color to use when rendering Tab guides.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketBorderColor">
            <summary>
            Gets or Sets the color of the bracket match borders.
            </summary>
            <remarks>
            NOTE: use Color.Transparent to turn off the bracket match borders.
            </remarks>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ShowTabGuides">
            <summary>
            Gets or Sets if the control should render Tab guides.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.WhitespaceColor">
            <summary>
            Gets or Sets the color to use when rendering whitespace characters
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.OutlineColor">
            <summary>
            Gets or Sets the color of the code Outlining (both folding lines and collapsed blocks).
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.SmoothScroll">
            <summary>
            Determines if the control should use a smooth scroll when scrolling one row up or down.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.SmoothScrollSpeed">
            <summary>
            Gets or Sets the speed of the vertical scroll when SmoothScroll is activated
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.AllowBreakPoints">
            <summary>
            Gets or Sets if the control can display breakpoints or not.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.RevisionMarkBeforeSave">
            <summary>
            Gets or Sets the RevisionMarkBeforeSave Color to use for modified rows.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.RevisionMarkAfterSave">
            <summary>
            Gets or Sets the RevisionMarkAfterSave Color to use for saved rows.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ParseOnPaste">
            <summary>
            Gets or Sets if the control should perform a full parse of the document when content is drag dropped or pasted into the control
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.FontSize">
            <summary>
            Gets or Sets the Size of the font.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.FontName"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.Indent">
            <summary>
            Determines what indentstyle to use on a new line.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.Document">
            <summary>
            Gets or Sets the SyntaxDocument the control is currently attatched to.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.TooltipDelay">
            <summary>
            Get or Set the delay before the tooltip is displayed over a collapsed block
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.CollapsedBlockTooltipsEnabled">
            <summary>
            Get or Set whether or not tooltips will be deplayed for collapsed blocks.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ReadOnly">
            <summary>
            Get or Set the delay before the tooltip is displayed over a collapsed block
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.FontName">
            <summary>
            Gets or Sets the name of the font.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.FontSize"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketMatching">
            <summary>
            Gets or Sets if bracketmatching is active
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketForeColor"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketBackColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.VirtualWhitespace">
            <summary>
            Gets or Sets if Virtual Whitespace is active.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.ShowWhitespace"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.SeparatorColor">
            <summary>
            Gets or Sets the separator Color.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketMatching"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketBackColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketForeColor">
            <summary>
            Gets or Sets the foreground Color to use when BracketMatching is activated.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketMatching"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketBackColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketBackColor">
            <summary>
            Gets or Sets the background Color to use when BracketMatching is activated.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketMatching"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BracketForeColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InactiveSelectionBackColor">
            <summary>
            The inactive selection background color.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.InactiveSelectionForeColor">
            <summary>
            The inactive selection foreground color.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.SelectionBackColor">
            <summary>
            The selection background color.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.SelectionForeColor">
            <summary>
            The selection foreground color.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.GutterMarginBorderColor">
            <summary>
            Gets or Sets the border Color of the gutter margin.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.GutterMarginColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberBorderColor">
            <summary>
            Gets or Sets the border Color of the line number margin
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberForeColor"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberBackColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BreakPointForeColor">
            <summary>
            Gets or Sets the foreground Color of a Breakpoint.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BreakPointBackColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BreakPointBackColor">
            <summary>
            Gets or Sets the background Color to use for breakpoint rows.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.BreakPointForeColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberForeColor">
            <summary>
            Gets or Sets the foreground Color of line numbers.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberBorderColor"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberBackColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberBackColor">
            <summary>
            Gets or Sets the background Color of line numbers.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberForeColor"/>
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.LineNumberBorderColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.GutterMarginColor">
            <summary>
            Gets or Sets the Color of the gutter margin
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.GutterMarginBorderColor"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.BackColor">
            <summary>
            Gets or Sets the background Color of the client area.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.HighLightedLineColor">
            <summary>
            Gets or Sets the background Color of the active line.
            <seealso cref="P:Alsing.Windows.Forms.SyntaxBoxControl.HighLightActiveLine"/>
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.HighLightActiveLine">
            <summary>
            Determines if the active line should be highlighted.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ShowWhitespace">
            <summary>
            Determines if Whitespace should be rendered as symbols.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ShowLineNumbers">
            <summary>
            Determines if the line number margin should be visible.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.ShowGutterMargin">
            <summary>
            Determines if the gutter margin should be visible.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.GutterMarginWidth">
            <summary>
            Gets or Sets the witdth of the gutter margin in pixels.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.TabsToSpaces">
            <summary>
            Gets or Sets the 'Tabs To Spaces' feature of the editor.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.TabSize">
            <summary>
            Get or Sets the size of a TAB char in number of SPACES.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ConvertTabsToSpaces">
            <summary>
            Converts all tabs to spaces the size of .TabSize in the Document.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ConvertSpacesToTabs">
            <summary>
            Converts all spaces the size of .TabSize in the Document to tabs.
            </summary>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.Caret">
            <summary>
            Gets the Caret object from the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.AutoListBeginLoad">
            <summary>
            Disables painting while loading data into the Autolist
            </summary>
            <remarks>
            
            </remarks>
            <example>
            <code>
            MySyntaxBox.AutoListClear();
            MySyntaxBox.AutoListBeginLoad();
            MySyntaxBox.AutoListAdd ("test",1);
            MySyntaxBox.AutoListAdd ("test",2);
            MySyntaxBox.AutoListAdd ("test",3);
            MySyntaxBox.AutoListAdd ("test",4);
            MySyntaxBox.AutoListEndLoad();
            </code>
            </example>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.AutoListEndLoad">
            <summary>
            Resumes painting and autosizes the Autolist.			
            </summary>		
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.AutoListClear">
            <summary>
            Clears the content in the autolist.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.AutoListAdd(System.String,System.Int32)">
            <summary>
            Adds an item to the autolist control.
            </summary>
            <example>
            <code>
            MySyntaxBox.AutoListClear();
            MySyntaxBox.AutoListBeginLoad();
            MySyntaxBox.AutoListAdd ("test",1);
            MySyntaxBox.AutoListAdd ("test",2);
            MySyntaxBox.AutoListAdd ("test",3);
            MySyntaxBox.AutoListAdd ("test",4);
            MySyntaxBox.AutoListEndLoad();
            </code>
            </example>
            <param name="text">The text to display in the autolist</param>
            <param name="ImageIndex">The image index in the AutoListIcons</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.AutoListAdd(System.String,System.String,System.Int32)">
            <summary>
            Adds an item to the autolist control.
            </summary>
            <param name="text">The text to display in the autolist</param>
            <param name="InsertText">The text to insert in the code</param>
            <param name="ImageIndex">The image index in the AutoListIcons</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.AutoListAdd(System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds an item to the autolist control.
            </summary>
            <param name="text">The text to display in the autolist</param>
            <param name="InsertText">The text to insert in the code</param>
            <param name="ToolTip"></param>
            <param name="ImageIndex">The image index in the AutoListIcons</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.CharFromPixel(System.Int32,System.Int32)">
            <summary>
            Converts a Client pixel coordinate into a TextPoint (Column/Row)
            </summary>
            <param name="x">Pixel x position</param>
            <param name="y">Pixel y position</param>
            <returns>The row and column at the given pixel coordinate.</returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ClearSelection">
            <summary>
            Clears the selection in the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Copy">
            <summary>
            Executes a Copy action on the selection in the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Cut">
            <summary>
            Executes a Cut action on the selection in the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Delete">
            <summary>
            Executes a Delete action on the selection in the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.GotoLine(System.Int32)">
            <summary>
            Moves the caret of the active view to a specific row.
            </summary>
            <param name="RowIndex">the row to jump to</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.GotoNextBookmark">
            <summary>
            Moves the caret of the active view to the next bookmark.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.GotoPreviousBookmark">
            <summary>
            Moves the caret of the active view to the previous bookmark.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.IsOverSelection(System.Int32,System.Int32)">
            <summary>
            Takes a pixel position and returns true if that position is inside the selected text.
            
            </summary>
            <param name="x">Pixel x position.</param>
            <param name="y">Pixel y position</param>
            <returns>true if the position is inside the selection.</returns>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Paste">
            <summary>
            Execute a Paste action if possible.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Redo">
            <summary>
            Execute a ReDo action if possible.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ScrollIntoView">
            <summary>
            Makes the caret in the active view visible on screen.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ScrollIntoView(Alsing.SourceCode.TextPoint)">
            <summary>
            Scrolls the active view to a specific position.
            </summary>
            <param name="Pos"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.SelectAll">
            <summary>
            Select all the text in the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.FindNext(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects the next word (from the current caret position) that matches the parameter criterias.
            </summary>
            <param name="Pattern">The pattern to find</param>
            <param name="MatchCase">Match case , true/false</param>
            <param name="WholeWords">Match whole words only , true/false</param>
            <param name="UseRegEx">To be implemented</param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.FindNext">
            <summary>
            Finds the next occurance of the pattern in the find/replace dialog
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ShowGotoLine">
            <summary>
            Shows the default GotoLine dialog.
            </summary>
            <example>
            <code>
            //Display the Goto Line dialog
            MySyntaxBox.ShowGotoLine();
            </code>
            </example>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ShowSettings">
            <summary>
            Not yet implemented
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ToggleBookmark">
            <summary>
            Toggles a bookmark on the active row of the active view.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Undo">
            <summary>
            Executes an undo action if possible.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ShowFind">
            <summary>
            Shows the Find dialog
            </summary>
            <example>
            <code>
            //Show FindReplace dialog
            MySyntaxBox.ShowFind();
            </code>
            </example>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.ShowReplace">
            <summary>
            Shows the Replace dialog
            </summary>
            <example>
            <code>
            //Show FindReplace dialog
            MySyntaxBox.ShowReplace();
            </code>
            </example>
        </member>
        <member name="P:Alsing.Windows.Forms.SyntaxBoxControl.AutoListSelectedText">
            <summary>
            The currently highlighted text in the autolist.
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.#ctor">
            <summary>
            Default constructor for the SyntaxBoxControl
            </summary>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.OnEnter(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alsing.Windows.Forms.SyntaxBoxControl.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Alsing.SourceCode.SpanDefinition">
             <summary>
             spanDefinition class
             </summary>
             <remarks>
             The spanDefinition class represents a specific code/text element<br/>
             such as a string , comment or the code itself.<br/>
             <br/>
             a spanDefinition  can contain keywords , operators , scopes and child spans.<br/>
             <br/>
             <br/>
             For example , if we where to describe the syntax C#<br/>
             we would have the following span:<br/>
             <br/>
             Code span						- the spanDefinition containing all the keywords and operators.<br/>
             Singleline comment span		    - a spanDefinition that starts on // terminates at the end of a line.<br/>
             Multiline comment span			- a spanDefinition that starts on /* can span multiple rows and terminates on */.<br/>
             String span					    - a spanDefinition that starts on " terminates on " or at the end of a line.<br/>
             Char span						- a spanDefinition that starts on ' terminates on ' or at the end of a line.<br/>
             <br/>
             <b>CHILD SPANS:</b><br/>
             The code span would have all the other spans as childspans , since they can only appear inside the<br/>
             code span . A string can for example never exist inside a comment in C#.<br/>
             a spanDefinition can also have itself as a child span.<br/>
             For example , the C# Code span can have itself as a childspan and use the scope patterns "{" and "}"<br/>
             this way we can accomplish FOLDING since the parser will know where a new scope starts and ends.<br/>
             <br/>
             <b>SCOPES:</b><br/>
             Scopes describe what patterns starts and what patterns end a specific spanDefinition.<br/>
             For example , the C# Multiline Comment have the scope patterns /* and */<br/>
             <br/>
             <b>KEYWORDS:</b><br/>
             A Keyword is a pattern that can only exist between separator chars.<br/>
             For example the keyword "for" in c# is valid if it is contained in this string " for ("<br/>
             but it is not valid if the containing string is " MyFormat "<br/>
             <br/>
             <b>OPERATORS:</b><br/>
             Operators is the same thing as keywords but are valid even if there are no separator chars around it.<br/>
             In most cases operators are only one or two chars such as ":" or "->"<br/>
             operators in this context should not be mixed up with code operators such as "and" or "xor" in VB6<br/>
             in this context they are keywords.<br/>
            <br/>
             <br/>
            </remarks>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.BackColor">
            <summary>
            The background color of a span.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.childSpanDefinitions">
            <summary>
            A list containing which spanDefinitions are valid child spans in a specific span.
            eg. strings and comments are child spans for a code span
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.KeywordsList">
            <summary>
            A list of keyword groups.
            For example , one keyword group could be "keywords" and another could be "datatypes"
            theese groups could have different color shemes assigned to them.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.MultiLine">
            <summary>
            Gets or Sets if the spanDefinition can span multiple lines or if it should terminate at the end of a line.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.Name">
            <summary>
            The name of this span.
            names are not required for span but can be a good help when interacting with the parser.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.OperatorsList">
            <summary>
            A list of operator groups.
            Each operator group can contain its own operator patterns and its own color shemes.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.ScopePatterns">
            <summary>
            A list of scopes , most span only contain one scope , eg a scope with start and end patterns "/*" and "*/"
            for multiline comments, but in some cases you will need more scopes , eg. PHP uses both "&lt;?" , "?&gt;" and "&lt;?PHP" , "PHP?&gt;"
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.Style">
            <summary>
            The style to use when colorizing the content of a span,
            meaning everything in this span except keywords , operators and childspans.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SpanDefinition.TerminateChildren">
            <summary>
            Gets or Sets if the parser should terminate any child span when it finds an end scope pattern for this span.
            for example %&gt; in asp terminates any asp span even if it appears inside an asp string.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SpanDefinition.#ctor(Alsing.SourceCode.SyntaxDefinition)">
            <summary>
            Default spanDefinition constructor
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SpanDefinition.Transparent">
            <summary>
            Returns false if any color has been assigned to the backcolor property
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SpanDefinitionList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDocumentExporters.CollapsingHTMLExporter">
            <summary>
            Html exporter class
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentExporters.CollapsingHTMLExporter.Export(Alsing.SourceCode.SyntaxDocument,System.String)">
            <summary>
            Exports the content of a SyntaxDocument to a HTML formatted string
            </summary>
            <param name="doc">SyntaxDocument object to export from</param>
            <param name="ImagePath">File path tho the images to use in the HTML string</param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentExporters.CollapsingHTMLExporter.Export(Alsing.SourceCode.SyntaxDocument,System.Drawing.Color,System.String,System.String)">
            <summary>
            Exports the content of a SyntaxDocument to a HTML formatted string
            </summary>
            <param name="doc">SyntaxDocument object to export from</param>
            <param name="BGColor">HTML color string to use as background color</param>
            <param name="ImagePath">File path tho the images to use in the HTML string</param>
            <param name="Style">HTML style string that should be applied to the output</param>
            <returns></returns>
        </member>
        <member name="T:Alsing.SourceCode.ImageIndexList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.FileType">
            <summary>
            File type struct
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.FileType.Extension">
            <summary>
            The file type extension
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.FileType.Name">
            <summary>
            The name of the file type
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDefinition">
            <summary>
            The SyntaxDefinition class describes a syntax.<br/>
            It consists of a mainSpanDefinition , which is the start spanDefinition of the SyntaxDefinition<br/>
            It also have a list of filetypes that is valid for this syntax<br/>
            </summary>
            <example>
            <b>Apply a Syntax to a SyntaxBox</b>
            <code>
            SyntaxBoxControl1.Document.SyntaxFile="C#.syn";
            </code>
            </example>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDefinition.FileTypes">
            <summary>
            List containing the valid filetypes for this syntax
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDefinition.mainSpanDefinition">
            <summary>
            The start spanDefinition for this syntax
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDefinition.Name">
            <summary>
            Name of the SyntaxDefinition
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDefinition.SpanDefinitions">
            <summary>
            Gets all BlockTypes in a given syntax.
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDefinitionList">
            <summary>
            SyntaxDefinition list class
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDefinitionList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDefinitionList.GetLanguageFromFile(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDefinitionList.GetSyntaxDefinitions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDefinitionLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDefinitionLoader.Load(System.String)">
            <summary>
            Load a specific syntax file
            </summary>
            <param name="File">File name</param>
            <returns>SyntaxDefinition object</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDefinitionLoader.Load(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="File"></param>
            <param name="Separators"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDefinitionLoader.LoadXML(System.String)">
            <summary>
            Load a specific syntax from an xml string
            </summary>
            <param name="XML"></param>
            <returns></returns>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.SyntaxDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.ParseRow(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="ParseKeywords"></param>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.Document">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.Init(System.String)">
            <summary>
            
            </summary>
            <param name="SyntaxFile"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.Init(Alsing.SourceCode.SyntaxDefinition)">
            <summary>
            
            </summary>
            <param name="syntaxDefinition"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.DefaultParser.ParsePreviewLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="RowIndex"></param>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDocumentParsers.IParser">
            <summary>
            Parser interface.
            Implement this interface if you want to create your own parser.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocumentParsers.IParser.Document">
            <summary>
            Gets or Sets the Document object for this parser
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocumentParsers.IParser.SyntaxDefinition">
            <summary>
            Gets or Sets the SyntaxDefinition for this parser
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.IParser.Init(System.String)">
            <summary>
            Initializes the parser with a spcified SyntaxFile
            </summary>
            <param name="syntaxDefinitionPath">Filename of the SyntaxFile that should be used</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.IParser.Init(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="syntaxDefinitionPath"></param>
            <param name="separators"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.IParser.Init(Alsing.SourceCode.SyntaxDefinition)">
            <summary>
            Initializes the parser with a spcified syntaxDefinition object
            </summary>
            <param name="syntaxDefinition">The Language object to assign to the parser</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.IParser.ParseRow(System.Int32,System.Boolean)">
            <summary>
            Called by the SyntaxDocument object when a row should be parsed
            </summary>
            <param name="RowIndex">The row index in the document</param>
            <param name="ParseKeywords">true if keywords and operators should be parsed , false if only a span parse should be performed</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocumentParsers.IParser.ParsePreviewLine(System.Int32)">
            <summary>
            Called by the SyntaxDocument object when a row must be preview parsed.
            </summary>
            <param name="RowIndex">Row index in the document</param>
        </member>
        <member name="T:Alsing.SourceCode.ParserEventHandler">
            <summary>
            Parser event handler
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.Pattern">
            <summary>
            A Pattern is a specific string or a RegEx pattern that is used by the parser.
            There are two types of patterns , Simple and Complex.
            
            Simple Patterns are patterns that consists of a simple fixed string eg. "void" or "for".
            Complex Patterns are patterns that consists of RegEx patterns , eg hex numbers or urls can be described as regex patterns.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Pattern.Category">
            <summary>
            Category of the pattern
            Built in categories are:
            URL
            MAIL
            FILE
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Pattern.IsComplex">
            <summary>
            Gets if the pattern is a simple string or a RegEx pattern
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Pattern.IsKeyword">
            <summary>
            Get or Sets if this pattern needs separator chars before and after it in order to be valid.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Pattern.IsSeparator">
            <summary>
            Gets or Sets if the pattern is a separator pattern .
            A separator pattern can be "End Sub" in VB6 , whenever that pattern is found , the SyntaxBoxControl will render a horizontal separator line.
            NOTE: this should not be mixed up with separator chars.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Pattern.LowerStringPattern">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Pattern.Parent">
            <summary>
            The owning PatternList , eg a specific KeywordList or OperatorList
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Pattern.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="iscomplex"></param>
        </member>
        <member name="M:Alsing.SourceCode.Pattern.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="iscomplex"></param>
            <param name="separator"></param>
            <param name="keyword"></param>
        </member>
        <member name="M:Alsing.SourceCode.Pattern.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="separator"></param>
            <param name="keyword"></param>
            <param name="escapeChar"></param>
        </member>
        <member name="P:Alsing.SourceCode.Pattern.StringPattern">
            <summary>
            Gets or Sets the the text of the pattern
            this only applies if the pattern is a simple pattern.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Pattern.ContainsSeparator">
            <summary>
            Returns true if the pattern contains separator chars<br/>
            (This is used by the parser)
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Pattern.HasSeparators(System.String,System.Int32)">
            <summary>
            For public use only
            </summary>
            <param name="text"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Pattern.IndexIn(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns the index of the pattern in a string
            </summary>
            <param name="this"></param>
            <param name="text">The string in which to find the pattern</param>
            <param name="startPosition">Start index in the string</param>
            <param name="matchCase">true if a case sensitive match should be performed</param>
            <param name="separators"></param>
            <returns>A PatternScanResult containing information on where the pattern was found and also the text of the pattern</returns>
        </member>
        <member name="T:Alsing.SourceCode.PatternCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.PatternList">
            <summary>
            A List containing patterns.
            this could be for example a list of keywords or operators
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.CaseSensitive">
            <summary>
            Gets or Sets if this list contains case seinsitive patterns
            </summary>		
        </member>
        <member name="F:Alsing.SourceCode.PatternList.ComplexPatterns">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.Name">
            <summary>
            The name of the pattern list
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.NormalizeCase">
            <summary>
            Gets or Sets if the patterns in this list should be case normalized
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.parentSpanDefinition">
            <summary>
            The parent spanDefinition of this list
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.SimplePatterns">
            <summary>
            for public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.SimplePatterns1Char">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.SimplePatterns2Char">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternList.Style">
            <summary>
            Gets or Sets the TextStyle that should be assigned to patterns in this list
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.PatternList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.PatternList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.PatternList.Add(Alsing.SourceCode.Pattern)">
            <summary>
            
            </summary>
            <param name="Pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.PatternList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.PatternListList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternListList.IsKeyword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternListList.IsOperator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternListList.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.PatternListList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.PatternListList.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.PatternListList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.PatternListList.Add(Alsing.SourceCode.PatternList)">
            <summary>
            
            </summary>
            <param name="Group"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.PatternListList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.PatternScanResult">
            <summary>
            PatternScanResult struct is redurned by the Pattern class when an .IndexIn call has been performed.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternScanResult.Index">
            <summary>
            The index on which the pattern was found in the source string
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.PatternScanResult.Token">
            <summary>
            The string that was found , this is always the same as the pattern StringPattern property if the pattern is a simple pattern.
            if the pattern is complex this field will contain the string that was found by the scan.
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SourceCodePrintDocument">
             <summary>
             Printer document class.
             </summary>
             <example >
             
             
             <b>Print the content of a SyntaxDocument:</b>
             <code>
             SourceCodePrintDocument PrintDoc=new SourceCodePrintDocument(MySyntaxDocument);
            
            	PrintDialog1.Document =PrintDoc;
            	if (PrintDialog1.ShowDialog ()==DialogResult.OK)
            		PrintDoc.Print ();
             </code>
             <hr/>
             <b>Print Preview the content of a SyntaxDocument</b>
             <code>
             SourceCodePrintDocument PrintDoc=new SourceCodePrintDocument(MySyntaxDocument);
             PrintPreviewDialog1.Document = PrintDoc
             PrintPreviewDialog1.ShowDialog ();
             </code>
             </example>
        </member>
        <member name="T:Alsing.SourceCode.RowState">
            <summary>
            Parser state of a row
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.RowState.NotParsed">
            <summary>
            the row is not parsed
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.RowState.SpanParsed">
            <summary>
            the row is span parsed
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.RowState.AllParsed">
            <summary>
            the row is both span and keyword parsed
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.Row">
            <summary>
            The row class represents a row in a SyntaxDocument
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Document">
            <summary>
            The owner document
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.endSpan">
            <summary>
            The first span that terminates on this row.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.endSpans">
            <summary>
            Segments that ends in this row
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Expansion_EndChar">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.expansion_EndSpan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Expansion_PixelEnd">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Expansion_PixelStart">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Expansion_StartChar">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.expansion_StartSpan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Images">
            <summary>
            Collection of Image indices assigned to a row.
            </summary>
            <example>
            <b>Add an image to the current row.</b>
            <code>
            MySyntaxBox.Caret.CurrentRow.Images.Add(3);
            </code>
            </example>
        </member>
        <member name="F:Alsing.SourceCode.Row.Indent">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.InKeywordQueue">
            <summary>
            Returns true if the row is in the owner documents keyword parse queue
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.InQueue">
            <summary>
            Returns true if the row is in the owner documents parse queue
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.startSpan">
            <summary>
            The first collapsable span on this row.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.startSpans">
            <summary>
            Segments that start on this row
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Row.Tag">
            <summary>
            Object tag for storage of custom user data..
            </summary>
            <example>
            <b>Assign custom data to a row</b>
            <code>
            //custom data class
            class CustomData{
            	public int		abc=123;
            	publci string	def="abc";
            }
            
            ...
            
            //assign custom data to a row
            Row MyRow=MySyntaxBox.Caret.CurrentRow;
            CustomData MyData=new CustomData();
            MyData.abc=1337;
            MyRow.Tag=MyData;
            
            ...
            
            //read custom data from a row
            Row MyRow=MySyntaxBox.Caret.CurrentRow;
            if (MyRow.Tag != null){
            	CustomData MyData=(CustomData)MyRow.Tag;
            	if (MyData.abc==1337){
            		//Do something...
            	}
            }
            
            
            </code>
            </example>
        </member>
        <member name="P:Alsing.SourceCode.Row.RowState">
            <summary>
            The parse state of this row
            </summary>
            <example>
            <b>Test if the current row is fully parsed.</b>
            <code>
            if (MySyntaxBox.Caret.CurrentRow.RowState==RowState.AllParsed)
            {
            	//do something
            }
            </code>
            </example>
        </member>
        <member name="P:Alsing.SourceCode.Row.Bookmarked">
            <summary>
            Gets or Sets if this row has a bookmark or not.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Breakpoint">
            <summary>
            Gets or Sets if this row has a breakpoint or not.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Count">
            <summary>
            Returns the number of words in the row.
            (this only applied if the row is fully parsed)
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Text">
            <summary>
            Gets or Sets the text of the row.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Item(System.Int32)">
            <summary>
            Return the Word object at the specified index.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Index">
            <summary>
            Returns the index of this row in the owner SyntaxDocument.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.VisibleIndex">
            <summary>
            Returns the visible index of this row in the owner SyntaxDocument
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.NextVisibleRow">
            <summary>
            Returns the next visible row.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.NextRow">
            <summary>
            Returns the next row
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.PrevVisibleRow">
            <summary>
            Returns the first visible row before this row.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.IsCollapsed">
            <summary>
            Returns true if the row is collapsed
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.IsCollapsedEndPart">
            <summary>
            Returns true if this row is the last part of a collepsed span
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.CanFold">
            <summary>
            Returns true if this row can fold
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Expanded">
            <summary>
            Gets or Sets if this row is expanded.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.CanFoldEndPart">
            <summary>
            Returns true if this row is the end part of a collapsable span
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.HasExpansionLine">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Expansion_EndRow">
            <summary>
            Returns the last row of a collapsable span
            (this only applies if this row is the start row of the span)
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.Expansion_StartRow">
            <summary>
            Returns the first row of a collapsable span
            (this only applies if this row is the last row of the span)
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.VirtualCollapsedRow">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.CollapsedText">
            <summary>
            Returns the text that should be displayed if the row is collapsed.
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Row.PrevRow">
            <summary>
            Returns the row before this row.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Row.GetEnumerator">
            <summary>
            Get the Word enumerator for this row
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.EnsureVisible">
            <summary>
            If the row is hidden inside a collapsed span , call this method to make the collapsed segments expanded.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Row.AddToParseQueue">
            <summary>
            Adds this row to the parse queue
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Row.SetText(System.String)">
            <summary>
            Assigns a new text to the row.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Alsing.SourceCode.Row.MatchCase">
            <summary>
            Call this method to make all words match the case of their patterns.
            (this only applies if the row is fully parsed)
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Row.Parse">
            <summary>
            Force a span parse on the row.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Row.Parse(System.Boolean)">
            <summary>
            Forces the parser to parse this row directly
            </summary>
            <param name="ParseKeywords">true if keywords and operators should be parsed</param>
        </member>
        <member name="M:Alsing.SourceCode.Row.GetLeadingWhitespace">
            <summary>
            Returns the whitespace string at the begining of this row.
            </summary>
            <returns>a string containing the whitespace at the begining of this row</returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.Add(Alsing.SourceCode.Word)">
            <summary>
            Adds a word object to this row
            </summary>
            <param name="word">Word object</param>
        </member>
        <member name="M:Alsing.SourceCode.Row.IndexOf(Alsing.SourceCode.Word)">
            <summary>
            Returns the index of a specific Word object
            </summary>
            <param name="word">Word object to find</param>
            <returns>index of the word in the row</returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindRightWordByPatternList(Alsing.SourceCode.PatternList,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="PatternList"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindRightWordByPatternListName(System.String,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="PatternListName"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindLeftWordByPatternList(Alsing.SourceCode.PatternList,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="PatternList"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindLeftWordByPatternListName(System.String,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="PatternListName"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindLeftWordByBlockType(Alsing.SourceCode.SpanDefinition,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="spanDefinition"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindRightWordByBlockType(Alsing.SourceCode.SpanDefinition,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="spanDefinition"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindLeftWordByBlockTypeName(System.String,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="BlockTypeName"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.Row.FindRightWordByBlockTypeName(System.String,Alsing.SourceCode.Word,System.Boolean)">
            <summary>
            For public use only
            </summary>
            <param name="BlockTypeName"></param>
            <param name="StartWord"></param>
            <param name="IgnoreStartWord"></param>
            <returns></returns>
        </member>
        <member name="T:Alsing.SourceCode.RowEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.RowEventArgs.Row">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.RowEventArgs.#ctor(Alsing.SourceCode.Row)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:Alsing.SourceCode.RowEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.RowList">
            <summary>
            Row collection class.
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.Scope">
            <summary>
            The Scope class defines what patterns starts and ends a spanDefinition
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.CaseSensitive">
            <summary>
            Gets or Sets if the scope patterns is case sensitive
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.DefaultExpanded">
            <summary>
            Gets or Sets if this block should be expanded or collapsed by default
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.EndPatterns">
            <summary>
            List of end patterns
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.ExpansionText">
            <summary>
            The text that should be displayed if the owner block is collapsed
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.NormalizeCase">
            <summary>
            Gets or Sets if the scope patterns should be case normalized
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.Parent">
            <summary>
            The owner spanDefinition
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.spawnSpanOnEnd">
            <summary>
            spanDefinition that should be started directly after this block have ended
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.spawnSpanOnStart">
            <summary>
            spanDefinition that should be started directly after this block have started
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.Start">
            <summary>
            The Start trigger Pattern
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Scope.Style">
            <summary>
            The style that should be applied to the start and end patterns
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.ScopeList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.Span">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.Depth">
            <summary>
            The depth of this span in the span hirarchy
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.EndRow">
            <summary>
            The row that the span ends on
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.EndWord">
            <summary>
            The word that ends this span
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.Expanded">
            <summary>
            Gets or Sets if this span is expanded
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.Parent">
            <summary>
            The parent span
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.Scope">
            <summary>
            Gets or Sets what scope triggered this span
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.spanDefinition">
            <summary>
            The owner spanDefinition
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.StartRow">
            <summary>
            The row on which the span starts
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Span.StartWord">
            <summary>
            The word that starts this span
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.Span.#ctor(Alsing.SourceCode.Row)">
            <summary>
            
            </summary>
            <param name="startrow"></param>
        </member>
        <member name="M:Alsing.SourceCode.Span.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SpanList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.TextPoint">
            <summary>
            Class representing a point in a text.
            where x is the column and y is the row.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.TextPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.TextPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="P:Alsing.SourceCode.TextPoint.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.TextPoint.Y">
            <summary>
            
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.TextPoint.Change">
            <summary>
            Event fired when the X or Y property has changed.
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.SyntaxDocument">
            <summary>
            The SyntaxDocument is a component that is responsible for Parsing , Folding , Undo / Redo actions and various text actions.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.UndoBuffer">
            <summary>
            Buffer containing undo actions
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.isParsed">
            <summary>
            For public use only
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.KeywordQueue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.NeedResetRows">
            <summary>
            Gets or Sets if folding needs to be recalculated
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.ParseQueue">
            <summary>
            List of rows that should be parsed
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.Parser">
            <summary>
            The active parser of the document
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.Tag">
            <summary>
            Tag property , lets the user store custom data in the row.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.SyntaxDocument.VisibleRows">
            <summary>
            List of rows that is not hidden by folding
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.SyntaxDocument.ParsingCompleted">
            <summary>
            Event that is raised when there is no more rows to parse
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.SyntaxDocument.Parsing">
            <summary>
            Raised when the parser is active
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.SyntaxDocument.Change">
            <summary>
            Raised when the document content is changed
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.SyntaxDocument.ModifiedChanged">
            <summary>
            Raised when the modified flag has changed
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.SyntaxDocument.RowParsed">
            <summary>
            Raised when a row have been parsed
            </summary>
        </member>
        <member name="E:Alsing.SourceCode.SyntaxDocument.RowDeleted">
            <summary>
            Raised when a row have been deleted
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.MaxUndoBufferSize">
            <summary>
            Gets or Sets the Maximum number of entries in the undobuffer
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.#ctor(System.ComponentModel.IContainer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.Modified">
            <summary>
            Get or Set the Modified flag
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.SyntaxFile">
            <summary>
            Get or Set the Name of the Syntaxfile to use
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.Folding">
            <summary>
            Gets or Sets if the document should use folding or not
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.IsParsed">
            <summary>
            Gets if the document is fully parsed
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.Item(System.Int32)">
            <summary>
            Returns the row at the specified index
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.Count">
            <summary>
            Gets the row count of the document
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.Text">
            <summary>
            Gets or Sets the text of the entire document
            </summary>		
        </member>
        <member name="P:Alsing.SourceCode.SyntaxDocument.Lines">
            <summary>
            Gets and string array containing the text of all rows.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ChangeVersion">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.StartUndoCapture">
            <summary>
            Starts an Undo Capture.
            This method can be called if you with to collect multiple text operations into one undo action
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.EndUndoCapture">
            <summary>
            Ends an Undo capture and pushes the collected actions onto the undostack
            <seealso cref="M:Alsing.SourceCode.SyntaxDocument.StartUndoCapture"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ReParse">
            <summary>
            ReParses the document
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ClearBookmarks">
            <summary>
            Removes all bookmarks in the document
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ClearBreakpoints">
            <summary>
            Removes all breakpoints in the document.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.EnsureParsed(Alsing.SourceCode.Row)">
            <summary>
            Call this method to ensure that a specific row is fully parsed
            </summary>
            <param name="Row"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.InvokeChange">
            <summary>
            Call this method to make the SyntaxDocument raise the Changed event
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ParseAll">
            <summary>
            Performs a span parse on all rows. No Keyword colorizing
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ParseAll(System.Boolean)">
            <summary>
            Parses all rows , either a span parse or a full parse with keyword colorizing
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.FoldAll">
            <summary>
            Folds all foldable rows
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.UnFoldAll">
            <summary>
            UnFolds all foldable rows
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ParseSome">
            <summary>
            Parses a chunk of 1000 rows , this is not thread safe
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ParseSome(System.Int32)">
            <summary>
            Parse a chunk of rows, this is not thread safe
            </summary>
            <param name="RowCount">The number of rows to parse</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Add(System.String)">
            <summary>
            Add a new row with the specified text to the bottom of the document
            </summary>
            <param name="text">Text to add</param>
            <returns>The row that was added</returns>		
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Add(System.String,System.Boolean)">
            <summary>
            Add a new row with the specified text to the bottom of the document
            </summary>
            <param name="text">Text to add</param>
            <param name="StoreUndo">true if and undo action should be added to the undo stack</param>
            <returns>The row that was added</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Insert(System.String,System.Int32)">
            <summary>
            Insert a text at the specified row index
            </summary>
            <param name="text">Text to insert</param>
            <param name="index">Row index where the text should be inserted</param>
            <returns>The row that was inserted</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Insert(System.String,System.Int32,System.Boolean)">
            <summary>
            Insert a text at the specified row index
            </summary>
            <param name="text">Text to insert</param>
            <param name="index">Row index where the text should be inserted</param>
            <param name="storeUndo">true if and undo action should be added to the undo stack</param>
            <returns>The row that was inserted</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Remove(System.Int32)">
            <summary>
            Remove a row at specified row index
            </summary>
            <param name="index">index of the row that should be removed</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Remove(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Remove a row at specified row index
            </summary>
            <param name="index">index of the row that should be removed</param>
            <param name="storeUndo">true if and undo action should be added to the undo stack</param>
            <param name="raiseChanged"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.DeleteRange(Alsing.SourceCode.TextRange)">
            <summary>
            Deletes a range of text
            </summary>
            <param name="Range">the range that should be deleted</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ParseRow(Alsing.SourceCode.Row,System.Boolean)">
            <summary>
            Forces a row to be parsed
            </summary>
            <param name="r">Row to parse</param>
            <param name="ParseKeywords">true if keywords and operators should be parsed</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ParseRow(Alsing.SourceCode.Row)">
            <summary>
            Forces a row to be parsed
            </summary>
            <param name="r">Row to parse</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetNextBookmark(System.Int32)">
            <summary>
            Gets the row index of the next bookmarked row
            </summary>
            <param name="StartIndex">Start index</param>
            <returns>Index of the next bookmarked row</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetPreviousBookmark(System.Int32)">
            <summary>
            Gets the row index of the previous bookmarked row
            </summary>
            <param name="StartIndex">Start index</param>
            <returns>Index of the previous bookmarked row</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.DeleteRange(Alsing.SourceCode.TextRange,System.Boolean)">
            <summary>
            Deletes a range of text
            </summary>
            <param name="Range">Range to delete</param>
            <param name="StoreUndo">true if the actions should be pushed onto the undo stack</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetRange(Alsing.SourceCode.TextRange)">
            <summary>
            Get a range of text
            </summary>
            <param name="Range">The range to get</param>
            <returns>string containing the text inside the given range</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.IndexOf(Alsing.SourceCode.Row)">
            <summary>
            Returns the index of a given row
            </summary>
            <param name="xtr">row to find</param>
            <returns>Index of the given row</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.clear">
            <summary>
            Clear all content in the document
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.InsertText(System.String,System.Int32,System.Int32)">
            <summary>
            Inserts a text into the document at a given column,row.
            </summary>
            <param name="text">Text to insert</param>
            <param name="xPos">Column</param>
            <param name="yPos">Row index</param>
            <returns>TextPoint containing the end of the inserted text</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.InsertText(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Inserts a text into the document at a given column,row.
            </summary>
            <param name="text">Text to insert</param>
            <param name="xPos">Column</param>
            <param name="yPos">Row index</param>
            <param name="StoreUndo">true if this action should be pushed onto the undo stack</param>
            <returns>TextPoint containing the end of the inserted text</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetRangeFromText(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a Range from a given text
            </summary>
            <param name="text"></param>
            <param name="xPos"></param>
            <param name="yPos"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.AddToUndoList(Alsing.SourceCode.UndoBlockCollection)">
            <summary>
            Add an action to the undo stack
            </summary>
            <param name="ActionGroup">action to add</param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Undo">
            <summary>
            Perform an undo action
            </summary>
            <returns>The position where the caret should be placed</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetSegmentFromPos(Alsing.SourceCode.TextPoint)">
            <summary>
            Gets a span object form a given column , Row index
            (This only applies if the row is fully parsed)
            </summary>
            <param name="p">Column and Rowindex</param>
            <returns>span object at the given position</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetWordFromPos(Alsing.SourceCode.TextPoint)">
            <summary>
            Gets a Word object form a given column , Row index
            (this only applies if the row is fully parsed)
            </summary>
            <param name="p">Column and Rowindex</param>
            <returns>Word object at the given position</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.GetFormatWordFromPos(Alsing.SourceCode.TextPoint)">
            <summary>
            Gets a Word object form a given column , Row index
            (this only applies if the row is fully parsed)
            </summary>
            <param name="p">Column and Rowindex</param>
            <returns>Word object at the given position</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.InvokeRowParsed(Alsing.SourceCode.Row)">
            <summary>
            Call this method to make the document raise the RowParsed event
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ResetVisibleRows">
            <summary>
            Call this method to recalculate the visible rows
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.PointToIntPos(Alsing.SourceCode.TextPoint)">
            <summary>
            Converts a Column/Row index position into a char index
            </summary>
            <param name="pos">TextPoint where x is column and y is row index</param>
            <returns>Char index in the document text</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.IntPosToPoint(System.Int32)">
            <summary>
            Converts a char index into a Column/Row index
            </summary>
            <param name="pos">Char index to convert</param>
            <returns>Point where x is column and y is row index</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.ToggleRow(Alsing.SourceCode.Row)">
            <summary>
            Toggle expansion of a given row
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.Redo">
            <summary>
            Perform an redo action
            </summary>
            <returns>The position where the caret should be placed</returns>
        </member>
        <member name="M:Alsing.SourceCode.SyntaxDocument.SetSyntaxFromEmbeddedResource(System.Reflection.Assembly,System.String)">
            <summary>
            Sets a syntax file, from an embedded resource.
            </summary>
            <param name="assembly">The assembly which contains the embedded resource.</param>
            <param name="resourceName">The name of the resource.</param>
        </member>
        <member name="T:Alsing.SourceCode.TextRange">
            <summary>
            A range of text
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.TextRange.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The start row of the range
            </summary>
            <summary>
            The start column of the range
            </summary>
            <summary>
            The end row of the range
            </summary>
            <summary>
            The end column of the range
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.TextStyle">
            <summary>
            TextStyles are used to describe the apperance of text.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.TextStyle.Name">
            <summary>
            Name of the style
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.TextStyle.#ctor">
            <summary>
            Gets or Sets if the style uses a Bold font
            </summary>
            <summary>
            Gets or Sets if the style uses an Italic font
            </summary>
            <summary>
            Gets or Sets if the style uses an Underlined font
            </summary>
            <summary>
            Gets or Sets the ForeColor of the style
            </summary>
            <summary>
            Gets or Sets the BackColor of the style
            </summary>
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.TextStyle.Transparent">
            <summary>
            Returns true if no color have been assigned to the backcolor
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.TextStyleDesignerDialog">
            <summary>
            Summary description for TextStyleDesignerDialog.
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.TextStyleDesignerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.TextStyleDesignerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.TextStyleDesignerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.UndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoAction.InsertRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoAction.DeleteRange">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.UndoBlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoBlock.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoBlock.Position">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoBlock.Action">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoBlock.RowModified">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.UndoBlockCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.UndoBlockCollection.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.#ctor(Alsing.SourceCode.UndoBlockCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.#ctor(Alsing.SourceCode.UndoBlock[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="P:Alsing.SourceCode.UndoBlockCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.UndoBlockCollection.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.UndoBlockCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.CopyTo(Alsing.SourceCode.UndoBlock[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.CopyTo(Alsing.SourceCode.UndoBlock[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="start"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Add(Alsing.SourceCode.UndoBlock)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Contains(Alsing.SourceCode.UndoBlock)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.IndexOf(Alsing.SourceCode.UndoBlock)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Insert(System.Int32,Alsing.SourceCode.UndoBlock)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="item"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Remove(Alsing.SourceCode.UndoBlock)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.AddRange(Alsing.SourceCode.UndoBlockCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.AddRange(Alsing.SourceCode.UndoBlock[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:Alsing.SourceCode.UndoBlockCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.UndoBlockCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alsing.SourceCode.UndoBlockCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.UndoBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alsing.SourceCode.UndoBuffer.ClearFrom(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Alsing.SourceCode.WordType">
            <summary>
            Word types
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.WordType.Word">
            <summary>
            The word is a normal word/text
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.WordType.Space">
            <summary>
            The word is a space char
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.WordType.Tab">
            <summary>
            The word is a tab char
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.Word">
            <summary>
            The word object class represents a word in a Row object
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.ErrorColor">
            <summary>
            Color of the error wave lines
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.HasError">
            <summary>
            True if the word has error wave lines
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.InfoTip">
            <summary>
            The ToolTip text for the word
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.Pattern">
            <summary>
            The pattern that created this word
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.Row">
            <summary>
            The parent row
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.Span">
            <summary>
            The parent span
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.Style">
            <summary>
            The style of the word
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.Text">
            <summary>
            The text of the word
            </summary>
        </member>
        <member name="F:Alsing.SourceCode.Word.Type">
            <summary>
            The type of the word
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Word.Index">
            <summary>
            Gets the index of the word in the parent row
            </summary>
        </member>
        <member name="P:Alsing.SourceCode.Word.Column">
            <summary>
            Returns the column where the word starts on the containing row.
            </summary>
        </member>
        <member name="T:Alsing.SourceCode.WordList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.Design.CollectionEditorGui">
            <summary>
            Summary description for CollectionEditorGui.
            </summary>
        </member>
        <member name="F:Alsing.Design.CollectionEditorGui.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alsing.Design.CollectionEditorGui.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alsing.Design.CollectionEditorGui.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alsing.Drawing.GDI.GDIObject">
            <summary>
            Summary description for GDIObject.
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.BinPatternMatcher">
            <summary>
            Pattern matcher that matches binary tokens
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.DecPatternMatcher">
            <summary>
            Pattern matcher that matches culture invariant decimal values
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.HexPatternMatcher">
            <summary>
            Pattern matcher that matches case insensitive hex values
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.IntPatternMatcher">
            <summary>
            Pattern matcher that matches culture invariant integer values
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.IPatternMatcher">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.PatternMatcherBase">
            <summary>
            Base implementation for pattern matchers
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.PropertyPathPatterhMatcher">
            <summary>
            Pattern matcher that matches a propertypath
            </summary>
        </member>
        <member name="T:Alsing.Text.PatternMatchers.RegexPatternMatcher">
            <summary>
            Pattern matcher that allows regex patterns to be matched
            </summary>
        </member>
        <member name="P:Alsing.Text.PatternMatchers.RegexPatternMatcher.Pattern">
            <summary>
            Gets or Sets the <c>Pattern</c> property
            </summary>
        </member>
        <member name="E:Alsing.Text.PatternMatchers.RegexPatternMatcher.PatternChanged">
            <summary>
            Fires when the 'Pattern' Property changes
            </summary>
        </member>
        <member name="M:Alsing.Text.PatternMatchers.RegexPatternMatcher.OnPatternChanged(System.EventArgs)">
            <summary>
            Raises the <c>PatternChanged</c> Event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="T:Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Properties.Resources.FlippedCursor">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Properties.Resources.MoveDown">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Properties.Resources.MoveUp">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Properties.Resources.MoveUpDown">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Properties.Resources.SourceCodePrintDocument">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Properties.Resources.SyntaxBoxControl">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Properties.Resources.SyntaxDocument">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
